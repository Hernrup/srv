input {
  udp {
    port  => 5000
    codec => json
  }
  beats {
    port  => 5044
  }
}
filter {
  if [docker][image] =~ /logstash/ {
    drop { }
  }

  grok {
    match => [ "message" , "\.(?<nanoseconds>[0-9]{1,9})"]
  }

  grok {
    match => [ "message" , "%{TIMESTAMP_ISO8601:customTimestamp} (?<message>.*)"]
    overwrite => [ "message" ]
  }

  date {
    match => [ "customTimestamp", "ISO8601"]
    timezone => "Europe/Stockholm"
    remove_field => [ "timestamp", "customTimestamp" ]
  }

  grok {
    match => ["message", "%{SPACE}*%{TIMESTAMP_ISO8601}*%{SPACE}*(?<message>.*)"]
    overwrite => ["message"]
  }

  ruby {
    code => "event.set('nanoseconds', event.get('nanoseconds') + '0' * (9 - event.get('nanoseconds').length))"
  }

  mutate {
    convert => ["nanoseconds", "integer"]
  }

  if [docker][image] =~ /(proxy|app)/ {
    grok {
      match => [ "message" , "%{COMBINEDAPACHELOG}%{SPACE}(?:(?:%{HOSTNAME:http_host}|-)|)%{SPACE}(?:(?:%{NUMBER:request_time:float}|-)|)%{SPACE}(?:(?:%{NUMBER:upstream_time:float}|-)|)%{GREEDYDATA:extra_fields}"]
      overwrite => "message"
    }

    grok {
      match => [ "agent", "lime.exe/(?<lime_desktop_version>[0-9.]+)%{GREEDYDATA}" ]
    }

    mutate {
      convert => ["response", "integer"]
      convert => ["bytes", "integer"]
      convert => ["nanoseconds", "integer"]
    }
    geoip {
      source => "clientip"
      target => "geoip"
      add_tag => [ "nginx-geoip" ]
    }

    useragent {
      source => "agent"
    }
  }
}
output {
  elasticsearch { hosts => ["${ELASTICSEARCH_URL}"] }
  websocket {}
  stdout { codec => rubydebug }
}

